name: Log Hours - Deploy to VPS via DockerHub

on:
  push:
    branches: [ main ]
    paths: 
      - 'log_hours/**'
      - '.github/workflows/log-hours.yml'
  pull_request:
    branches: [ main ]
    paths: 
      - 'log_hours/**'
      - '.github/workflows/log-hours.yml'
  workflow_dispatch: # Allow manual trigger

env:
  CONTAINER_NAME: work-logger
  DEPLOY_PATH: /opt/work-logger
  WORKING_DIRECTORY: log_hours

jobs:
  test:
    runs-on: ubuntu-latest
    environment: main
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        python -m pip install --upgrade pip
        pip install --index-url https://pypi.org/simple -r requirements.txt

    - name: Install Playwright browsers
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        playwright install chromium
        playwright install-deps chromium

    - name: Run basic tests
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        export PYTHONPATH="${PYTHONPATH}:$(pwd)"
        echo "🧪 Testing script execution..."
        python src/loghours.py --help

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    environment: main
    env:
      DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/work-logger
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./log_hours
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        echo "🧪 Testing Docker script execution..."
        docker run --rm ${{ env.DOCKER_IMAGE }}:latest python src/loghours.py --help

  deploy:
    needs: [test, build-and-push]
    runs-on: ubuntu-latest
    environment: main
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    env:
      DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/work-logger

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate required secrets
      run: |
        echo "🔍 Validating required secrets..."
        missing_secrets=()
        
        # Check deployment secrets
        [[ -z "${{ secrets.VPS_SSH_KEY }}" ]] && missing_secrets+=("VPS_SSH_KEY")
        [[ -z "${{ secrets.VPS_HOST }}" ]] && missing_secrets+=("VPS_HOST")
        [[ -z "${{ secrets.VPS_USER }}" ]] && missing_secrets+=("VPS_USER")
        
        # Check application secrets
        [[ -z "${{ secrets.SYSTEM_USERNAME }}" ]] && missing_secrets+=("SYSTEM_USERNAME")
        [[ -z "${{ secrets.SYSTEM_PASSWORD }}" ]] && missing_secrets+=("SYSTEM_PASSWORD")
        [[ -z "${{ secrets.JIRA_URL }}" ]] && missing_secrets+=("JIRA_URL")
        [[ -z "${{ secrets.JIRA_USERNAME }}" ]] && missing_secrets+=("JIRA_USERNAME")
        [[ -z "${{ secrets.JIRA_PROJECT }}" ]] && missing_secrets+=("JIRA_PROJECT")
        [[ -z "${{ secrets.JIRA_SVC_ACCOUNT }}" ]] && missing_secrets+=("JIRA_SVC_ACCOUNT")
        [[ -z "${{ secrets.JIRA_API_TOKEN }}" ]] && missing_secrets+=("JIRA_API_TOKEN")
        
        # Check if whatsapp is enabled
        if [[ -z "${{ secrets.WHATSAPP_ENABLED }}" ]]; then
          [[ -z "${{ secrets.WHATSAPP_RECIPIENT }}" ]] && missing_secrets+=("WHATSAPP_RECIPIENT")
          [[ -z "${{ secrets.WHATSAPP_API_KEY }}" ]] && missing_secrets+=("WHATSAPP_API_KEY")
          [[ -z "${{ secrets.WHATSAPP_API_URL }}" ]] && missing_secrets+=("WHATSAPP_API_URL")
          [[ -z "${{ secrets.WHATSAPP_INSTANCE }}" ]] && missing_secrets+=("WHATSAPP_INSTANCE")

        fi
        
        if [ ${#missing_secrets[@]} -ne 0 ]; then
          echo "❌ Missing required secrets in 'main' environment:"
          printf " - %s\n" "${missing_secrets[@]}"
          exit 1
        fi
        
        echo "✅ All required secrets are present"

    - name: Validate deployment files
      run: |
        echo "🔍 Validating deployment files..."
        required_files=("log_hours/docker-compose.yml" "log_hours/docker-entrypoint.sh")
        
        for file in "${required_files[@]}"; do
          if [[ ! -f "$file" ]]; then
            echo "❌ Required file missing: $file"
            exit 1
          fi
          echo "✅ Found: $file"
        done

    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_ed25519
        chmod 600 ~/.ssh/id_ed25519
        ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

    - name: Copy deployment files to VPS
      run: |
        # Copy required files from repository
        echo "📤 Copying deployment files to VPS..."
        scp log_hours/docker-compose.yml ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/tmp/
        scp log_hours/docker-entrypoint.sh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/tmp/
        echo "✅ Files copied successfully"
        
        # Create and copy deployment script
        cat > deploy-script.sh << 'EOF'
        #!/bin/bash
        set -e

        # Enhanced error handling
        trap 'echo "❌ Deployment failed at line $LINENO. Exit code: $?" >&2' ERR
        
        echo "🚀 Starting DockerHub deployment to VPS (Log Hours)..."
        
        # Variables
        DEPLOY_PATH="${{ env.DEPLOY_PATH }}"
        CONTAINER_NAME="${{ env.CONTAINER_NAME }}"
        DOCKER_IMAGE="${{ env.DOCKER_IMAGE }}"
        
        # Validate variables
        [[ -z "$DEPLOY_PATH" ]] && { echo "❌ DEPLOY_PATH not set"; exit 1; }
        [[ -z "$CONTAINER_NAME" ]] && { echo "❌ CONTAINER_NAME not set"; exit 1; }
        [[ -z "$DOCKER_IMAGE" ]] && { echo "❌ DOCKER_IMAGE not set"; exit 1; }
        
        # Create deployment directory
        sudo mkdir -p $DEPLOY_PATH
        sudo chown $USER:$USER $DEPLOY_PATH
        cd $DEPLOY_PATH
        
        # Validate copied files exist
        echo "🔍 Validating copied files..."
        for file in docker-compose.yml docker-entrypoint.sh; do
          if [[ ! -f "/tmp/$file" ]]; then
            echo "❌ Required file missing: /tmp/$file"
            exit 1
          fi
        done
        
        # Copy required files
        echo "📋 Copying deployment files..."
        cp /tmp/docker-compose.yml .
        cp /tmp/docker-entrypoint.sh .
        chmod +x docker-entrypoint.sh
        
        # Generate .env file with all required variables
        echo "⚙️ Generating .env file..."
        cat > .env << EOL
        # Docker configuration
        DOCKER_IMAGE=$DOCKER_IMAGE:latest
        CONTAINER_NAME=$CONTAINER_NAME
        
        # Application credentials
        SYSTEM_USERNAME=${{ secrets.SYSTEM_USERNAME }}
        SYSTEM_PASSWORD=${{ secrets.SYSTEM_PASSWORD }}
        JIRA_URL=${{ secrets.JIRA_URL }}
        JIRA_USERNAME=${{ secrets.JIRA_USERNAME }}
        JIRA_PROJECT=${{ secrets.JIRA_PROJECT }}
        JIRA_SVC_ACCOUNT=${{ secrets.JIRA_SVC_ACCOUNT }}
        JIRA_API_TOKEN=${{ secrets.JIRA_API_TOKEN }}

        # WhatsApp credentials
        WHATSAPP_ENABLED=${{ secrets.WHATSAPP_ENABLED }}
        WHATSAPP_RECIPIENT=${{ secrets.WHATSAPP_RECIPIENT }}
        WHATSAPP_API_KEY=${{ secrets.WHATSAPP_API_KEY }}
        WHATSAPP_API_URL=${{ secrets.WHATSAPP_API_URL }}
        WHATSAPP_INSTANCE=${{ secrets.WHATSAPP_INSTANCE }}
        
        # Schedule configuration (optional - defaults to Friday 10 AM if not set)
        CRON_SCHEDULE=${{ secrets.CRON_SCHEDULE }}
        
        # Python environment
        PYTHONPATH=/app
        PYTHONUNBUFFERED=1
        EOL
        
        # Set secure permissions
        chmod 600 .env
        
        echo "✅ Environment file created with $(wc -l < .env) variables"
        
        # Create directories for volumes
        mkdir -p screenshots logs
        
        # Stop existing container
        echo "🛑 Stopping existing container..."
        docker compose down || true
        
        # Clean up any existing containers with similar names
        echo "🧹 Cleaning up existing containers..."
        docker ps -a --filter "name=work-logger" --format "{{.Names}}" | xargs -r docker rm -f || true
        
        # Pull latest image from DockerHub with retry
        echo "📥 Pulling latest image from DockerHub..."
        for i in {1..3}; do
          if docker pull $DOCKER_IMAGE:latest; then
            echo "✅ Image pulled successfully"
            break
          else
            echo "⚠️ Pull attempt $i failed, retrying..."
            sleep 5
          fi
          if [[ $i -eq 3 ]]; then
            echo "❌ Failed to pull image after 3 attempts"
            exit 1
          fi
        done
        
        # Clean up old images (keep last 2 versions)
        echo "🧹 Cleaning up old images..."
        docker image prune -f || true
        
        # Start new container
        echo "🚀 Starting new container..."
        docker compose up -d
        
        # Wait for container to be ready with proper health check
        echo "⏳ Waiting for container to be ready..."
        for i in {1..30}; do
          if docker ps --format "{{.Names}}" | grep -q "^${CONTAINER_NAME}$"; then
            echo "✅ Container started successfully"
            break
          else
            echo "⏳ Waiting for container... (attempt $i/30)"
            sleep 2
          fi
          if [[ $i -eq 30 ]]; then
            echo "❌ Container failed to start within 60 seconds"
            docker logs $CONTAINER_NAME || true
            exit 1
          fi
        done
        
        # Verify deployment - check for exact container name
        echo "🔍 Verifying deployment..."
        if docker ps --format "{{.Names}}" | grep -q "^${CONTAINER_NAME}$"; then
          echo "✅ Container is running with correct name: $CONTAINER_NAME"
          echo "📋 Container info:"
          docker ps --filter "name=^${CONTAINER_NAME}$"
          echo "📝 Recent logs:"
          docker logs $CONTAINER_NAME --tail=20
        else
          echo "❌ Container '$CONTAINER_NAME' not found"
          echo "📋 Available containers:"
          docker ps --format "table {{.Names}}\t{{.Image}}\t{{.Status}}"
          echo "📝 Checking for any work-logger related containers:"
          docker ps --filter "name=work-logger" --format "table {{.Names}}\t{{.Image}}\t{{.Status}}" || true
          exit 1
        fi
        
        # Cleanup temp files
        rm -f /tmp/docker-compose.yml /tmp/docker-entrypoint.sh
        
        echo "✅ Deployment completed successfully!"
        echo "📍 Container: $CONTAINER_NAME"
        echo "🐳 Image: $DOCKER_IMAGE:latest"
        echo "📂 Location: $DEPLOY_PATH"
        
        EOF
        
        chmod +x deploy-script.sh
        scp deploy-script.sh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/tmp/

    - name: Deploy to VPS
      timeout-minutes: 10
      run: |
        ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "bash /tmp/deploy-script.sh && rm /tmp/deploy-script.sh"

    - name: Verify deployment
      timeout-minutes: 5
      run: |
        ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
        echo "🔍 Final verification..."
        
        cd ${{ env.DEPLOY_PATH }}
        
        # Check container status with exact name match
        if docker ps --format "{{.Names}}" | grep -q "^${{ env.CONTAINER_NAME }}$"; then
          echo "✅ Container is running"
          echo "📊 Container stats:"
          docker stats ${{ env.CONTAINER_NAME }} --no-stream
        else
          echo "❌ Container not running"
          echo "📋 Available containers:"
          docker ps --format "table {{.Names}}\t{{.Image}}\t{{.Status}}"
          exit 1
        fi
        
        # Test application
        echo "🧪 Testing script execution in container..."
        docker exec ${{ env.CONTAINER_NAME }} python src/loghours.py --help || echo "⚠️ Script execution test skipped"

        # Test WhatsApp connection
        echo "🧪 Testing WhatsApp connection..."
        docker exec ${{ env.CONTAINER_NAME }} python src/loghours.py --wp-test || echo "⚠️ WhatsApp connection test skipped"
        
        # Verify cron is set up
        echo "⏰ Verifying cron schedule..."
        CRON_OUTPUT=$(docker exec ${{ env.CONTAINER_NAME }} crontab -l)
        if echo "$CRON_OUTPUT" | grep -q "cd /app && python src/loghours.py"; then
          SCHEDULE=$(echo "$CRON_OUTPUT" | grep "cd /app && python src/loghours.py" | awk '{print $1 " " $2 " " $3 " " $4 " " $5}')
          echo "✅ Cron job configured with schedule: $SCHEDULE"
        else
          echo "⚠️ Cron job not found or incorrectly configured"
        fi
        
        # Show image info
        echo "🐳 Current image info:"
        docker images | grep work-logger | head -5
        
        EOF

    - name: Send deployment notification
      if: always()
      run: |
        # Create deployment summary
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Item | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| Status | ${{ job.status == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| VPS Host | ${{ secrets.VPS_HOST }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Container | ${{ env.CONTAINER_NAME }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Image | ${{ env.DOCKER_IMAGE }}:latest |" >> $GITHUB_STEP_SUMMARY
        echo "| Path | ${{ env.DEPLOY_PATH }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Schedule | ${{ secrets.CRON_SCHEDULE || '0 10 * * 5 (default: Friday 10 AM)' }} |" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ job.status }}" == "success" ]; then
          echo "🎉 Log Hours DockerHub deployment to VPS completed successfully!"
          echo "🔗 VPS: ${{ secrets.VPS_HOST }}"
          echo "🐳 Image: ${{ env.DOCKER_IMAGE }}:latest"
          echo "📦 Container: ${{ env.CONTAINER_NAME }}"
          echo "📂 Path: ${{ env.DEPLOY_PATH }}"
          echo "🌐 Registry: https://hub.docker.com/r/${{ secrets.DOCKERHUB_USERNAME }}/work-logger"
          echo "⏰ Schedule: ${{ secrets.CRON_SCHEDULE || '0 10 * * 5 (default: Friday 10 AM)' }}"
        else
          echo "❌ Log Hours deployment failed!"
          echo "## ❌ Deployment Failed" >> $GITHUB_STEP_SUMMARY
          echo "Check the workflow logs for details." >> $GITHUB_STEP_SUMMARY
        fi 